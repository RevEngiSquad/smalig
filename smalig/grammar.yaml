- opcode: "00"
  name: "nop"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "nop"
  args_info: ""
  short_desc: "No operation"
  long_desc: "Does nothing, Waste cycles."
  note: "Data-bearing pseudo-instructions are tagged with this opcode, in which case the high-order byte of the opcode unit indicates the nature of the data. See \"packed-switch-payload Format\", \"sparse-switch-payload Format\", and \"fill-array-data-payload Format\"."
  example: "0000 - nop"
  example_desc: "Does nothing, Waste cycles"

- opcode: "01"
  name: "move"
  format: "B|A|op"
  format_id: "12x"
  syntax: "move vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. Both registers must be in the first 256 register range & 4 bits."
  note: ""
  example: "0110 - move v0, v1"
  example_desc: "Moves the content of v1 into v0."

- opcode: "02"
  name: "move/from16"
  format: "AA|op BBBB"
  format_id: "22x"
  syntax: "move/from16 vAA, vBBBB"
  args_info: "A: destination register (8 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. vB may be in the 64k register range while vA is one of the first 256 registers."
  note: ""
  example: "0200 1900 - move/from16 v0, v25"
  example_desc: "Moves the content of v25 into v0."

- opcode: "03"
  name: "move/16"
  format: "ØØ|op AAAA BBBB"
  format_id: "32x"
  syntax: "move/16 vAAAA, vBBBB"
  args_info: "A: destination register (16 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. Both registers must be in the first 65535 register range & 16 bits."
  note: ""
  example: "030000090181 - move/16 v2304, v33025"
  example_desc: "Moves the content of v33025 into v2304."

- opcode: "28"
  name: "goto"
  format: "AA|op"
  format_id: "10t"
  syntax: "goto target"
  args_info: "target: signed branch offset (8 bits)"
  short_desc: "Unconditionally jump to the indicated instruction."
  long_desc: "Unconditionally jump to the indicated short (8 bits) instruction offset."
  note: "The branch offset must not be 0. (A spin loop may be legally constructed either with goto/32 or by including a nop as a target before the branch.)"
  example: "28E9 - goto 0x000150EA"
  example_desc: "Jumps to the instruction at address 0x000150EA."
